@page "/timeonprojects"
@using MudBlazor

@inject IUserService userService
@inject IProjectService projectService
@inject IWorkSessionService workSessionService
@inject IWorkDayService workDayService

<div class="row mb-4">
    <div class="col-12">
        <div class="card p-4">
            <h5 class="mb-3">Filtriraj podatke</h5>
            <div class="row g-3 align-items-end">
                <div class="col-md">
                    <label for="userSelect" class="form-label">Zaposlenici</label>
                    <select id="userSelect" class="form-select" @bind="selectedUserId">
                        <option value="">Svi zaposlenici</option>
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.Name @user.Surname</option>
                        }
                    </select>

                </div>

                <div class="col-md">
                    <label for="projectSelect" class="form-label">Projekti</label>
                    <select id="projectSelect" class="form-select" tabindex="projectId" @bind="projectId">
                        <option value="">-- Odaberi projekt --</option>
                        @foreach (var project in projects)
                        {
                            <option value="@project.Id">@project.Name</option>
                        }
                    </select>
                </div>

                <div class="col-md">
                    <label for="fromDate" class="form-label">Od datuma</label>
                    <input id="fromDate" type="datetime-local" class="form-control" @bind="startDate" />
                </div>

                <div class="col-md">
                    <label for="toDate" class="form-label">Do datuma</label>
                    <input id="toDate" type="datetime-local" class="form-control" @bind="endDate" />
                </div>

                <div class="col-auto">
                    <button type="submit" class="btn btn-primary" @onclick="GetChartData">
                        Pretraži
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (showChart)
{
    <div class="row">
        <div class="col-12">
            <MudPaper Class="p-4 d-flex flex-column flex-md-row gap-4 align-items-start justify-content-center">

                <div>
                    <MudText Typo="Typo.h6" Class="mb-2 text-center">Omjer utrošenih sati po zaposleniku</MudText>
                    <MudCard Class="p-4" Style="width: 320px; height: 320px;">
                        <MudChart ChartType="ChartType.Donut"
                                  Width="100%"
                                  Height="100%"
                                  InputData="@data"
                                  InputLabels="@labels">
                            <CustomGraphics>
                                <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-size="16">
                                    Ukupno vrijeme
                                </text>
                                <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-size="22">
                                    @string.Format("{0:%d}d {0:hh\\:mm}", totalWorkHours)
                                </text>
                            </CustomGraphics>
                        </MudChart>
                    </MudCard>
                </div>

                <div class="flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-2 text-center">Radno vrijeme zaposlenika po danima</MudText>
                    <MudPaper Class="p-4">
                        <MudChart ChartType="ChartType.Line"
                                  ChartSeries="@series"
                                  XAxisLabels="@xAsisLabelsArray"
                                  Width="100%"
                                  Height="400px"
                                  ChartOptions="@options" />
                    </MudPaper>
                </div>

            </MudPaper>
        </div>
    </div>

}

@code {
    private List<UserDTO> users = new();
    private List<ProjectDTO> projects = new();    
    private TimeSpan totalWorkHours;

    private int projectId;
    private DateOnly startDate = new DateOnly(2025, 6, 16);   //DateOnly.FromDateTime(DateTime.Today);
    private DateOnly endDate = new DateOnly(2025, 6, 22);     //DateOnly.FromDateTime(DateTime.Today);
    private readonly ChartOptions options = new();

    private bool showChart = false;

    private List<ChartSeries> series = new();
    private HashSet<string> xAsisLabels = new();
    private string[] xAsisLabelsArray; 
    private string? selectedUserId = null;

    private string[] labels = Array.Empty<string>();
    private double[] data = Array.Empty<double>();

    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetAllAsync();
        projects = await projectService.GetAllActive(true);
    }

    private async Task GetChartData()
    {
        showChart = true;
        series.Clear();
        totalWorkHours = TimeSpan.Zero;
        options.YAxisTicks = 12;

        xAsisLabels = Enumerable.Range(0, (endDate.DayNumber - startDate.DayNumber + 1))
            .Select(day => startDate.AddDays(day).ToString())
            .ToHashSet();

        xAsisLabelsArray = xAsisLabels.OrderBy(d => d).ToArray();

        var filteredUsers = !string.IsNullOrWhiteSpace(selectedUserId)
            ? users.Where(u => u.Id == selectedUserId)
            : users;

        var userTimeMap = new Dictionary<string, double>(); 

        foreach (var user in filteredUsers)
        {
            var userSessions = await workSessionService
                .GetAllUserSessionsByProjectBetweenDays(user.Id, projectId, startDate, endDate);

            var timeByDate = new Dictionary<string, double>();
            foreach (var dateLabel in xAsisLabels)
            {
                timeByDate[dateLabel] = 0;
            }

            double totalUserHours = 0;

            foreach (var session in userSessions)
            {
                var workDay = await workDayService.GetByIdAsync(session.WorkDayId);
                if (workDay == null) continue;

                var dateStr = workDay.WorkDate.ToString();
                var duration = session.EndTime - session.StartTime;

                if (timeByDate.ContainsKey(dateStr))
                {
                    timeByDate[dateStr] += duration.TotalHours;
                }

                totalUserHours += duration.TotalHours;
                totalWorkHours += duration;
            }

            userTimeMap[user.FullName] = totalUserHours;

            var s = new ChartSeries
            {
                Name = $"{user.FullName}",
                Data = xAsisLabelsArray.Select(date => timeByDate[date]).ToArray()
            };

            series.Add(s);
        }

        labels = userTimeMap.Keys.ToArray();
        data = userTimeMap.Values.ToArray();

        StateHasChanged();
    }


}
