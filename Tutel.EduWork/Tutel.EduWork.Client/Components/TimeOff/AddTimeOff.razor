@page "/addtimeoff"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject IVacationService vacationService
@inject ISickLeaveService sickLeaveService
@inject IUserService userService
@inject AuthenticationStateProvider AuthStateProvider

<h3>Dodaj odsutnost</h3>

<div class="mb-3">
    <label class="form-label">Vrsta odsutnosti</label>
    <select class="form-select" @bind="selectedType">
        <option value="vacation">Godišnji odmor</option>
        <option value="sickleave">Bolovanje</option>
    </select>
</div>

@if (selectedType == "vacation")
{
    <EditForm Model="@vacation" OnValidSubmit="HandleVacationSubmit">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Datum početka</label>
            <InputDate @bind-Value="vacation.StartDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Datum kraja</label>
            <InputDate @bind-Value="vacation.EndDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Godina</label>
            <InputNumber @bind-Value="vacation.Year" class="form-control" />
        </div>
        <div class="form-check mb-3">
            <InputCheckbox @bind-Value="vacation.IsTeamBuilding" class="form-check-input" />
            <label class="form-check-label">Teambuilding</label>
        </div>

        <AuthorizeView Roles="Admin,Superuser">
            <Authorized Context="adminCtx">
                <div class="mb-3">
                    <label class="form-label">Korisnik</label>
                    <select class="form-select" @bind="vacation.UserId">
                        <option value="">-- Odaberi korisnika --</option>
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.FullName</option>
                        }
                    </select>
                </div>
            </Authorized>
            <NotAuthorized Context="userCtx">
                <input type="hidden" value="@currentUserId"/>
                <div class="mb-3">
                    <label class="form-label">Korisnik</label>
                    <input class="form-control" value="@currentUserFullName" disabled />
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <button type="submit" class="btn btn-success">Spremi</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Natrag</button>
    </EditForm>
}
else if (selectedType == "sickleave")
{
    <EditForm Model="@sickLeave" OnValidSubmit="HandleSickLeaveSubmit">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Datum početka</label>
            <InputDate @bind-Value="sickLeave.StartDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Datum kraja</label>
            <InputDate @bind-Value="sickLeave.EndDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Razlog bolovanja</label>
            <InputText @bind-Value="sickLeave.Reason" class="form-control" />
            <ValidationMessage For="@(() => sickLeave.Reason)" />
        </div>

        <AuthorizeView Roles="Admin,Superuser">
            <Authorized Context="adminCtx">
                <div class="mb-3">
                    <label class="form-label">Korisnik</label>
                    <select class="form-select" @bind="sickLeave.UserId">
                        <option value="">-- Odaberi korisnika --</option>
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.FullName</option>
                        }
                    </select>
                </div>
            </Authorized>
            <NotAuthorized Context="userCtx">
                <input type="hidden" value="@currentUserId"/>
                <div class="mb-3">
                    <label class="form-label">Korisnik</label>
                    <input class="form-control" value="@currentUserFullName" disabled />
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <button type="submit" class="btn btn-success">Spremi</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Natrag</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass mt-3">@message</div>
}

@code {
    private string selectedType = "vacation";
    private string message = string.Empty;
    private string alertClass = string.Empty;

    private List<UserDTO> users = new();

    private string? currentUserId;
    private string? currentUserFullName;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        currentUserFullName = user.Identity?.Name ?? "";
        isAdmin = user.IsInRole("Admin") || user.IsInRole("Superuser");

        if (isAdmin)
        {
            users = await userService.GetAllAsync();
        }
    }

    private VacationDTO vacation = new()
    {
        StartDate = DateOnly.FromDateTime(DateTime.Today),
        EndDate = DateOnly.FromDateTime(DateTime.Today),
        Year = DateTime.Today.Year
    };

    private SickLeaveDTO sickLeave = new()
    {
        StartDate = DateOnly.FromDateTime(DateTime.Today),
        EndDate = DateOnly.FromDateTime(DateTime.Today)
    };

    private async Task HandleVacationSubmit()
    {
        if (!isAdmin)
        {
            vacation.UserId = currentUserId!;
        }

        if (vacation.StartDate > vacation.EndDate)
        {
            ShowError("Datum početka ne može biti nakon datuma kraja!");
            return;
        }
        if (string.IsNullOrEmpty(vacation.UserId))
        {
            ShowError("Morate odabrati korisnika!");
            return;
        }

        try
        {
            await vacationService.AddAsync(vacation);
            ShowSuccess("Godišnji odmor uspješno dodan!");
            await Task.Delay(1200);
            NavigationManager.NavigateTo("/timeoff");
        }
        catch (Exception ex)
        {
            ShowError($"Greška: {ex.Message} {(ex.InnerException?.Message ?? string.Empty)}");
        }
    }

    private async Task HandleSickLeaveSubmit()
    {
        if (!isAdmin)
        {
            sickLeave.UserId = currentUserId!;
        }

        if (sickLeave.StartDate > sickLeave.EndDate)
        {
            ShowError("Datum početka ne može biti nakon datuma kraja!");
            return;
        }
        if (string.IsNullOrEmpty(sickLeave.UserId))
        {
            ShowError("Morate odabrati korisnika!");
            return;
        }
        if (string.IsNullOrWhiteSpace(sickLeave.Reason))
        {
            ShowError("Morate unijeti razlog bolovanja!");
            return;
        }

        try
        {
            await sickLeaveService.AddAsync(sickLeave);
            ShowSuccess("Bolovanje uspješno dodano!");
            await Task.Delay(1200);
            NavigationManager.NavigateTo("/timeoff");
        }
        catch (Exception ex)
        {
            ShowError($"Greška: {ex.Message} {(ex.InnerException?.Message ?? string.Empty)}");
        }
    }

    private void GoBack() => NavigationManager.NavigateTo("/timeoff");

    private void ShowError(string msg)
    {
        message = msg;
        alertClass = "alert-danger";
    }

    private void ShowSuccess(string msg)
    {
        message = msg;
        alertClass = "alert-success";
    }
}