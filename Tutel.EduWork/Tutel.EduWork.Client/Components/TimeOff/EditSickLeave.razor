@page "/editsickleave/{Id:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject ISickLeaveService sickLeaveService
@inject IUserService userService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<h3>Uredi bolovanje</h3>

@if (isLoading)
{
    <p>Učitavanje...</p>
}
else if (!hasAccess)
{
    <div class="alert alert-danger">Nemate prava pristupa ovoj stranici.</div>
}
else
{
    <EditForm Model="@sickLeave" OnValidSubmit="HandleEdit">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Datum početka</label>
            <InputDate @bind-Value="sickLeave.StartDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Datum kraja</label>
            <InputDate @bind-Value="sickLeave.EndDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Razlog bolovanja</label>
            <InputText @bind-Value="sickLeave.Reason" class="form-control" />
        </div>

        <AuthorizeView Roles="Admin,Superuser" Context="authCtx">
            <Authorized Context="adminCtx">
                <div class="mb-3">
                    <label class="form-label">Korisnik</label>
                    <select class="form-select" value="@sickLeave.UserId" @onchange="OnUserChanged">
                        <option value="">-- Odaberi korisnika --</option>
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.FullName</option>
                        }
                    </select>
                </div>
            </Authorized>
            <NotAuthorized Context="userCtx">
                <div class="mb-3">
                    <label class="form-label">Korisnik</label>
                    <input class="form-control" value="@sickLeave.FullName" disabled />
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <button type="submit" class="btn btn-success">Spremi</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Natrag</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @alertClass mt-3" role="alert">@message</div>
    }
}

@code {
    [Parameter] public int Id { get; set; }

    private SickLeaveDTO? sickLeave;
    private List<UserDTO>? users;

    private string? currentUserId;

    private bool isAdmin;
    private bool hasAccess = true;
    private bool isLoading = true;

    private string message = string.Empty;
    private string alertClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        isAdmin = user.IsInRole("Admin") || user.IsInRole("Superuser");

        sickLeave = await sickLeaveService.Get(Id);
        if (sickLeave == null)
        {
            hasAccess = false;
            isLoading = false;
            return;
        }

        if (!isAdmin && sickLeave.UserId != currentUserId)
        {
            hasAccess = false;
            isLoading = false;
            return;
        }

        if (isAdmin)
        {
            users = await userService.GetAllAsync();
        }

        isLoading = false;
    }

    private void OnUserChanged(ChangeEventArgs e)
    {
        var id = e.Value?.ToString();
        sickLeave!.UserId = id;
        var usr = users?.FirstOrDefault(u => u.Id == id);
        sickLeave.FullName = usr?.FullName ?? string.Empty;
    }

    private async Task HandleEdit()
    {
        if (!hasAccess)
            return;

        if (!isAdmin)
            sickLeave!.UserId = currentUserId!;

        if (sickLeave!.StartDate > sickLeave.EndDate)
        {
            ShowError("Datum početka ne može biti nakon datuma kraja!");
            return;
        }

        try
        {
            await sickLeaveService.UpdateAsync(sickLeave);
            ShowSuccess("Uspješno ažurirano!");
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/timeoff");
        }
        catch (Exception ex)
        {
            ShowError($"Greška: {ex.Message}");
        }
    }

    private void GoBack() => NavigationManager.NavigateTo("/timeoff");

    private void ShowError(string msg)
    {
        message = msg;
        alertClass = "alert-danger";
    }

    private void ShowSuccess(string msg)
    {
        message = msg;
        alertClass = "alert-success";
    }
}
