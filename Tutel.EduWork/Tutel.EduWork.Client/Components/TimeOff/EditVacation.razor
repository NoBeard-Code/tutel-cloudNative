@page "/editvacation/{Id:int}"
@using Tutel.EduWork.BusinessLayer.Abstractions
@using Tutel.EduWork.BusinessLayer.DTOs

@inject IVacationService vacationService
@inject IUserService userService
@inject NavigationManager NavigationManager

<h3>Uredi godišnji odmor</h3>

@if (vacation == null || users == null)
{
    <p>Učitavanje...</p>
}
else
{
    <EditForm Model="@vacation" OnValidSubmit="HandleEdit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Datum početka</label>
            <InputDate @bind-Value="vacation.StartDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Datum kraja</label>
            <InputDate @bind-Value="vacation.EndDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Godina</label>
            <InputNumber @bind-Value="vacation.Year" class="form-control" />
        </div>
        <div class="form-check mb-3">
            <InputCheckbox @bind-Value="vacation.IsTeamBuilding" class="form-check-input" />
            <label class="form-check-label">Teambuilding</label>
        </div>
        <div class="mb-3">
            <label class="form-label">Korisnik</label>
            <select class="form-select" @bind="vacation.UserId">
                <option value="">-- Odaberi korisnika --</option>
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.FullName</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-success">Spremi</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Natrag</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @alertClass mt-3">@message</div>
    }
}

@code {
    [Parameter] public int Id { get; set; }
    private VacationDTO? vacation;
    private List<UserDTO>? users;
    private string message = "";
    private string alertClass = "";

    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetAllAsync();
        vacation = await vacationService.GetByIdAsync(Id);
    }

    private async Task HandleEdit()
    {
        try
        {
            await vacationService.UpdateAsync(vacation!);
            message = "Uspješno ažurirano!";
            alertClass = "alert-success";
            await Task.Delay(1200);
            NavigationManager.NavigateTo("/timeoff");
        }
        catch (Exception ex)
        {
            message = $"Greška: {ex.Message}";
            alertClass = "alert-danger";
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/timeoff");
    }
}
