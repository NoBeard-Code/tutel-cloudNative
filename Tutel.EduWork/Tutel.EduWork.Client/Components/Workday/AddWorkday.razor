@using Tutel.EduWork.BusinessLayer.Abstractions
@using Tutel.EduWork.BusinessLayer.DTOs
@using Tutel.EduWork.BusinessLayer.Exceptions

<EditForm Model="@workDay" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row justify-content-md-center">
            <div class="col-lg-3 mb-2 mb-lg-0">
                <input class="form-control" type="time" @bind="workDay.WorkDayStart" />
            </div>
            <div class="col-lg-3 mb-2 mb-lg-0">
                <input class="form-control" type="date" value=@workDay.WorkDate.ToString("yyyy-MM-dd") @onchange=WorkDateChanged />
            </div>
            <div class="col-lg-auto">
                <button type="submit" class="btn btn-primary" hidden=@workDayAlreadyExists>
                    Dodaj radni dan
                </button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="container mt-3 alert @messageClass">@message</div>
    }
</EditForm>

@inject IWorkDayService workDayService;
@code
{
    [Parameter]
    public required string UserId { get; set; }

    private DateTime WorkDayStartTime;
    private DateTime SelectedDate;

    private bool workDayAlreadyExists = false;

    private WorkDayDTO workDay = new WorkDayDTO();
    private string? message = "";
    private string messageClass = "alert-success";

    protected override void OnInitialized()
    {
        workDay.WorkDayStart = TimeOnly.FromDateTime(DateTime.Now);
        workDay.WorkDate = DateOnly.FromDateTime(DateTime.Now);
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckIfWorkDayExists();
    }

    private async Task WorkDateChanged(ChangeEventArgs args)
    {
        if(args.Value != null && args.Value.ToString() != null)
        {
            workDay.WorkDate = DateOnly.Parse(args.Value.ToString() ?? DateTime.Now.ToString());
            await CheckIfWorkDayExists();
        }
    }

    private async Task CheckIfWorkDayExists()
    {
        if (await workDayService.GetByUserIdWorkDateAsync(UserId, workDay.WorkDate) == null)
        {
            messageClass = "alert-warning";
            message = $"Još niste unijeli radni dan za datum: {workDay.WorkDate}";
            workDayAlreadyExists = false;
        }
        else
        {
            message = "";
            workDayAlreadyExists = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        workDay.UserId = UserId;
        try
        {
            await workDayService.AddAsync(workDay);
            messageClass = "alert-success";
            message = "Radni dan je uspješno dodan.";
            workDayAlreadyExists = true;
        }
        catch (DuplicateInsertException ex)
        {
            message = ex.Message;
            messageClass = "alert-danger";
            workDayAlreadyExists = false;
        }
        catch (Exception ex)
        {
            message = "Dodavanje radnog dana nije bilo uspješno.";
            messageClass = "alert-danger";
            workDayAlreadyExists = false;
        }
    }
}

