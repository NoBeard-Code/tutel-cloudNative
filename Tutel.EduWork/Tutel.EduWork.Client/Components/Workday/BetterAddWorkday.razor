@using Tutel.EduWork.BusinessLayer.Exceptions

<div class="container rounded bg-light p-2">
    <div class="row">
        <div id="day-carousel" class="carousel">
                <div class="carousel-platform" id="platform"></div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="container border border-dark rounded w-50" hidden="@workDayAlreadyExists">
            <div class="col-12 text-center fs-4">Početak radnog vremena: @workDay.WorkDayStart</div>
            <div class="col-12 text-center fs-4">Očekivani kraj radnog vremena: @workDay.WorkDayStart.AddHours(8)</div>
        </div>
    </div>
    <div class="row mt-4 justify-content-center">
        <div class="col-auto">
            <button type="submit" class="add-workDay-Button" hidden="@workDayAlreadyExists" @onclick=HandleValidSubmit>Dodaj radni dan</button>
            <button type="submit" class="goTo-workDay-Button" hidden="@(!workDayAlreadyExists)" @onclick="@(() => GoToWorkSessions(workDayId))">Otvori radni dan: @workDay.WorkDate</button>
        </div>
    </div>

</div>

<script src="js/workDayAdd.js"></script>

<style>

    .daySelection-item {
        width: 25%;
        text-align: center;
        font-size: 22px;
        line-height: 16px;
        white-space: nowrap;
        transition: font-size 0.3s, transform 0.3s;
        cursor: pointer;
        flex: 0 0 auto;
        align-items: center;
        justify-content: center;
        padding: 10px;
        --extra-transform: '';
        transform: var(--extra-transform) scale(1);
        transform-origin: center;
    }

    .daySelection-item.active {
        font-size: 30px;
        line-height: 22px;
        font-weight: bold;
            transform: var(--extra-transform) scale(1.2) translateY(-5px);
        --extra-transform: '';
        transform-origin: center;
    }
    .carousel {
        width: 100%;
        max-width: 800px;
        overflow: hidden;
        margin: auto;
        position: relative;
    }

    .carousel-platform {
        display: flex;
        will-change: transform;
    }

</style>

@inject IJSRuntime JS
@inject IServiceScopeFactory serviceScopeFactory;
@inject NavigationManager NavigationManager;
@code {

    [Parameter]
    public required string UserId { get; set; }

    private DateOnly selectedDate;
    private DateTime WorkDayStartTime;
    private DateTime SelectedDate;

    private bool workDayAlreadyExists = false;

    private WorkDayDTO workDay = new WorkDayDTO();
    private int workDayId;
    private string? message = "";
    private string messageClass = "alert-success";

    private DotNetObjectReference<BetterAddWorkday>? objRef;

    protected override void OnInitialized()
    {
        workDay.WorkDayStart = TimeOnly.FromDateTime(DateTime.Now);
        workDay.WorkDate = DateOnly.FromDateTime(DateTime.Now);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("SetUpDaySelector", objRef);  
            await CheckIfWorkDayExists();
        }
    }

    private async Task CheckIfWorkDayExists()
    {
        using (var scope = serviceScopeFactory.CreateScope())
        {
            var workDayService = scope.ServiceProvider.GetService<IWorkDayService>();
            WorkDayDTO? workDayToCheck = await workDayService.GetByUserIdWorkDateAsync(UserId, workDay.WorkDate);
            if (workDayToCheck == null)
            {
                messageClass = "alert-warning";
                message = $"Još niste unijeli radni dan za datum: {workDay.WorkDate}";
                workDayAlreadyExists = false;
            }
            else
            {
                message = "Radni dan već postoji. ";
                workDayId = workDayToCheck.Id;
                workDayAlreadyExists = true;
            }
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        workDay.UserId = UserId;
        try
        {
            using (var scope = serviceScopeFactory.CreateScope())
            {
                var workDayService = scope.ServiceProvider.GetService<IWorkDayService>();
                await workDayService.AddAsync(workDay);
                workDayId = (await workDayService.GetByUserIdWorkDateAsync(UserId, workDay.WorkDate)).Id;
                messageClass = "alert-success";
                message = "Radni dan je uspješno dodan. ";
                workDayAlreadyExists = true;
            }
        }
        catch (DuplicateInsertException ex)
        {
            message = ex.Message;
            messageClass = "alert-danger";
            workDayAlreadyExists = false;
        }
        catch (Exception ex)
        {
            message = "Dodavanje radnog dana nije bilo uspješno.";
            messageClass = "alert-danger";
            workDayAlreadyExists = false;
        }
    }

    private void GoToWorkSessions(int workDayId)
    {
        NavigationManager.NavigateTo($"/worksessions/{workDayId}");
    }

    [JSInvokable]
    public async Task SelectDate(string isoDate)
    {
        if(DateTime.TryParse(isoDate, out var date))
        {
            workDay.WorkDate = DateOnly.FromDateTime(date);
            Console.WriteLine(workDay.WorkDate);
            await CheckIfWorkDayExists();
        }
    }
}
