@inject NavigationManager NavigationManager

<h2 class="mb-4">Pregled zaposlenika</h2>

<div class="row mb-3">
    <div class="d-flex align-items-center gap-3">
        <input type="text" class="form-control w-auto" placeholder="Pretraži po imenu..."
               @bind="searchTerm" @bind:event="oninput" style="min-width: 250px;" />

        <button class="btn btn-primary btn-sm" @onclick="NavigateToAddNewUser">Dodaj novog zaposlenika</button>

        <button class="btn btn-outline-secondary btn-sm" @onclick="ClearHighlights">Očisti</button>
    </div>
</div>


<table class="table table-bordered">
    <thead class="table-light">
        <tr>
            <th>Ime i prezime</th>
            <th>Email</th>
            <th>Akcije</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in FilteredUsers)
        {
            <tr class="@GetRowClass(user)">
                <td>@user.FullName</td>
                <td>@user.Email</td>
                <td>
                    <button class="btn btn-primary btn-sm me-2" @onclick="() => NavigateToViewUser(user.Id)">Pregled</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter] public List<UserDTO> Users { get; set; } = new();
    [Parameter] public List<string> HighlightedUsers { get; set; } = new();
    private string searchTerm = string.Empty;

    private IEnumerable<UserDTO> FilteredUsers => string.IsNullOrWhiteSpace(searchTerm)
        ? Users
        : Users.Where(u => $"{u.Name} {u.Surname}".Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void NavigateToViewUser(string userId)
    {
        NavigationManager.NavigateTo($"/manageuser/{userId}");
    }

    private void NavigateToAddNewUser()
    {
        NavigationManager.NavigateTo("/adduser", forceLoad: true);
    }

    private string GetRowClass(UserDTO user)
    {
        return HighlightedUsers.Any(id =>
            string.Equals(id.Trim(), user.Id.Trim(), StringComparison.OrdinalIgnoreCase))
            ? "table-danger"
            : string.Empty;
    }

    private void ClearHighlights()
    {
        HighlightedUsers.Clear();
    }
}
