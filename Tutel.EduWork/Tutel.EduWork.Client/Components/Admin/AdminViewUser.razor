@page "/manageuser/{UserId}"
@using Microsoft.AspNetCore.Identity

@inject NavigationManager NavigationManager
@inject IRoleService roleService
@inject IUserService userService
@inject IProjectService projectService
@inject IWorkSessionService workSessionService

<h3 class="mb-4">Detalji zaposlenika</h3>

@if (user == null || roles == null || allRoles == null)
{
    <div class="alert alert-info">Učitavanje podataka...</div>
}
else
{
    <div class="card mb-4" style="max-width: 40rem;">
        <div class="card-body">
            <h5 class="card-title">@user.FullName</h5>
            <h6 class="card-subtitle mb-3 text-muted">@user.Email</h6>

            <div class="mb-4">
                <strong>Uloge:</strong>
                <div class="mt-2 d-flex flex-wrap">
                    @if (roles.Count == 0)
                    {
                        <span class="text-muted"><em>Korisnik nema dodijeljene uloge.</em></span>
                    }
                    else
                    {
                        @foreach (var role in roles)
                        {
                            <span class="badge bg-primary d-flex align-items-center me-2 mb-2">
                                @role
                                <i class="bi bi-x-circle-fill ms-2 text-white"
                                   style="cursor: pointer;"
                                   title="Ukloni ulogu"
                                   @onclick="() => RemoveRole(role)">
                                </i>
                            </span>
                        }
                    }
                </div>
            </div>

            <div class="input-group mb-4" style="max-width: 25rem;">
                <select class="form-select" @bind="selectedRole">
                    <option value="">-- Odaberi ulogu za dodavanje --</option>
                    @foreach (var r in allRoles.Where(r => !roles.Contains(r.Name)))
                    {
                        <option value="@r.Name">@r.Name</option>
                    }
                </select>
                <button class="btn btn-success" @onclick="AddRole" disabled="@string.IsNullOrEmpty(selectedRole)">
                    Dodaj ulogu
                </button>
            </div>

            <button class="btn btn-primary me-2" @onclick="OpenCreateRoleModal">Kreiraj novu ulogu</button>
            @if (!user.LockoutEnabled)
            {
                <button class="btn btn-danger me-2" @onclick="() => PromptLockoutChange(true)">Deaktiviraj korisnika</button>
            }
            else
            {
                <button class="btn btn-success me-2" @onclick="() => PromptLockoutChange(false)">Aktiviraj korisnika</button>
            }
        </div>
    </div>
}

<div class="d-flex align-items-center gap-3 mb-3">
    <h4 class="mb-0">Projekti</h4>
    <button class="btn btn-success" @onclick="OpenProjectAssignModal">
        Dodaj projekt
    </button>
</div>

@if (userProjects == null || userProjects.Count == 0)
{
    <div class="alert alert-warning">Ne postoje projekti za prikaz.</div>
}
else
{
    <div class="row row-cols-md-3 g-4">
        @foreach (var project in userProjects)
        {
            <div class="col">
                <div class="card shadow-sm rounded-4 h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title fw-semibold mb-2">@project.Name</h5>
                        <p class="text-muted mb-3">@project.Description</p>

                        <p class="mb-2">
                            <strong>Ukupno vrijeme:</strong><br />
                            @string.Format("{0:%d}d {0:hh\\:mm\\:ss}", projectTimeByProjectId[project.Id])
                        </p>

                        <div class="mb-3">
                            <span class="badge bg-@(project.IsActive ? "info" : "warning") me-2">
                                @(project.IsActive ? "Aktivan" : "Neaktivan")
                            </span>
                            <span class="badge bg-@(project.IsBillable ? "success" : "danger")">
                                @(project.IsBillable ? "Plaćen" : "Nije plaćen")
                            </span>
                        </div>

                        <div class="mt-auto">
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveUserFromProject(project.Id)">
                                Ukloni korisnika sa projekta
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showLockoutConfirmDialog)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Potvrda akcije</h5>
                </div>
                <div class="modal-body">
                    <p>
                        Jeste li sigurni da želite
                        @(newLockoutState ? "deaktivirati" : "aktivirati")
                        korisnika <strong>@user.FullName</strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelLockoutChange">Odustani</button>
                    <button class="btn @(newLockoutState ? "btn-danger" : "btn-success")" @onclick="ConfirmLockoutChange">
                        @(newLockoutState ? "Deaktiviraj" : "Aktiviraj")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showCreateRoleModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Kreiraj novu ulogu</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseCreateRoleModal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" placeholder="Ime uloge" @bind="newRoleName" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseCreateRoleModal">Zatvori</button>
                    <button class="btn btn-primary" @onclick="CreateRole" disabled="@string.IsNullOrWhiteSpace(newRoleName)">Spremi</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showProjectAssignModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dodaj korisnika na projekt</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseProjectAssignModal"></button>
                </div>
                <div class="modal-body">
                    <select class="form-select mb-3" @bind="selectedProjectId">
                        <option value="0">-- Odaberi projekt --</option>
                        @foreach (var project in availableProjects.Where(project => !userProjects.Any(up => up.Id == project.Id)))
                        {
                            <option value="@project.Id">@project.Name</option>
                        }
                    </select>

                    <select class="form-select" @bind="selectedPosition">
                        <option value="">-- Odaberi poziciju --</option>
                        @foreach (var pos in positions)
                        {
                            <option value="@pos">@pos</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseProjectAssignModal">Odustani</button>
                    <button class="btn btn-primary" @onclick="AddUserOnProject">Dodaj</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string UserId { get; set; }

    private List<string> positions = new List<string>
    {
        "Developer",
        "QA",
        "Manager",
        "Designer",
        "Team Lead",
        "Product Owner",
        "Scrum Master",
        "Business Analyst",
        "DevOps Engineer",
        "System Administrator",
        "UX/UI Designer",
        "Technical Writer",
        "Support Engineer",
        "Security Specialist",
        "Database Administrator",
        "Architect",
        "Intern",
        "Full Stack Developer",
        "Frontend Developer",
        "Backend Developer",
        "Mobile Developer",
        "Data Scientist",
        "Machine Learning Engineer",
        "Quality Assurance Lead",
        "Release Manager",
        "Cloud Engineer"
    };

    private string selectedPosition;


    private UserDTO user;
    private List<string> roles = new();
    private List<IdentityRole> allRoles = new();
    private List<ProjectDTO> userProjects = new();

    private string selectedRole;
    private bool showCreateRoleModal = false;
    private string newRoleName;
    private bool showLockoutConfirmDialog = false;
    private bool newLockoutState;

    private Dictionary<int, TimeSpan> projectTimeByProjectId = new();

    private bool showProjectAssignModal = false;
    private List<ProjectDTO> availableProjects = new();
    private int selectedProjectId;

    protected override async Task OnInitializedAsync()
    {
        user = await userService.GetUserAsync(UserId);
        roles = (await userService.GetUserRolesAsync(UserId)).ToList();
        allRoles = (await roleService.GetAllRolesAsync()).ToList();
        userProjects = await projectService.GetAllProjectsByUser(UserId);

        foreach (var project in userProjects)
        {
            var time = await GetTotalProjectTime(project.Id);
            projectTimeByProjectId[project.Id] = time;
        }
    }

    private async Task AddRole()
    {
        if (!string.IsNullOrEmpty(selectedRole))
        {
            await userService.AddRoleToUserAsync(UserId, selectedRole);
            roles.Add(selectedRole);
            selectedRole = string.Empty;
            StateHasChanged();
        }
    }

    private async Task RemoveRole(string role)
    {
        await userService.RemoveRoleFromUserAsync(UserId, role);
        roles = (await userService.GetUserRolesAsync(UserId)).ToList();
        StateHasChanged();
    }

    private void OpenCreateRoleModal()
    {
        newRoleName = string.Empty;
        showCreateRoleModal = true;
    }

    private void CloseCreateRoleModal()
    {
        showCreateRoleModal = false;
    }

    private async Task CreateRole()
    {
        if (!string.IsNullOrWhiteSpace(newRoleName))
        {
            await roleService.CreateRoleAsync(newRoleName);
            allRoles.Add(new IdentityRole(newRoleName));
            showCreateRoleModal = false;
            StateHasChanged();
        }
    }

    private async Task ChangeUserLockoutState(string userId, bool state)
    {
        await userService.ChangeUserLockoutStateAsync(userId, state);
        user = await userService.GetUserAsync(userId);
        StateHasChanged();
    }

    private void PromptLockoutChange(bool state)
    {
        newLockoutState = state;
        showLockoutConfirmDialog = true;
    }

    private void CancelLockoutChange()
    {
        showLockoutConfirmDialog = false;
    }

    private async Task ConfirmLockoutChange()
    {
        await ChangeUserLockoutState(user.Id, newLockoutState);
        showLockoutConfirmDialog = false;
    }

    private async Task<TimeSpan> GetTotalProjectTime(int projectId)
    {
        TimeSpan totalTime = new TimeSpan();
        var workSessions = await workSessionService.GetAllUserSessionsByProjectAsync(user.Id, projectId);
        foreach (var workSession in workSessions)
        {
            var timeDiff = workSession.EndTime - workSession.StartTime;
            totalTime = totalTime + timeDiff;
        }
        return totalTime;
    }

    private async Task RemoveUserFromProject(int projectId)
    {
        await projectService.RemoveUserFromProject(user.Id, projectId);
        userProjects = await projectService.GetAllProjectsByUser(UserId);
        StateHasChanged();
    }

    private async void OpenProjectAssignModal()
    {
        availableProjects = await projectService.GetAllActive(true);
        selectedProjectId = 0;
        selectedPosition = null;
        showProjectAssignModal = true;
        StateHasChanged();
    }

    private void CloseProjectAssignModal()
    {
        showProjectAssignModal = false;
    }

    private async Task AddUserOnProject()
    {
        if (selectedProjectId != 0)
        {
            await projectService.AddUserOnProject(user.Id, selectedProjectId, selectedPosition);
            userProjects = await projectService.GetAllProjectsByUser(UserId);

            foreach (var project in userProjects)
            {
                if (!projectTimeByProjectId.ContainsKey(project.Id))
                {
                    var time = await GetTotalProjectTime(project.Id);
                    projectTimeByProjectId[project.Id] = time;
                }
            }

            showProjectAssignModal = false;
            selectedPosition = null;
            selectedProjectId = 0;
            StateHasChanged();
        }
    }

}
